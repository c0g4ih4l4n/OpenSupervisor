mongodb credentials: admin/long@2020
db: ThesisDB

app credentials: admin_db/long@2020

db.createUser({
      user: "admin",
      pwd: "long@2020",
      roles: [
                { role: "userAdminAnyDatabase", db: "admin" },
                { role: "readWriteAnyDatabase", db: "admin" },
                { role: "dbAdminAnyDatabase",   db: "admin" }
             ]
  });

db.createUser({
      user: "admin_db",
      pwd: "long@2020",
      roles: [
                { role: "userAdmin", db: "ThesisDB" },
                { role: "dbAdmin",   db: "ThesisDB" },
                { role: "readWrite", db: "ThesisDB" }
             ]
  });

create unique index for ip
    db.ip.createIndex({'ip': 1}, { unique: true})

db.createCollection('vuln')

command run: 
main app: 
  python app.py

worker: 
  celery -A app.celery worker --loglevel=info -P threads

ip['nmap']['scan'][ip['ip']]['tcp']

vuln db:
  create vuln DB with fields 
    (id, service, vuln, product, version, details, mitigation method)



https://hunter.io/

burp api company key: XNKy1NyCohRpa5M3svxcGU8XaSxr8u31
task_id -> location header in response
get scan result
/v0.1/scan/{task_id}


Burp run in cmd:
  For automating Burp we generally recommend Burp Enterprise Edition which is designed for this use case.

  You can also run Burp Pro in headless mode:

  bc. java -Djava.awt.headless=true -jar burpsuite_pro.jar

  You can then use the "Rest API":https://portswigger.net/blog/burps-new-rest-api to launch scans.

start openvas-manager with lport and lip

scan_id:    118056d4-da60-411c-9eb8-904aa03ef375
target_id:  55655548-4993-47b3-b106-ce9ab89f09a6

run wappanalyzer on docker port 3000
  query: http://localhost:3000/extract?url=https://vsec.com.vn
